{
    "contents" : "\n# abstracted these basic operations that take place regardless of the condition\n# subset the data and sort \nsubsetandsort <- function (inHospitals, inState, inColumnNum) {\n  \n  # coerce the column to numeric - required to remove missing values\n  inHospitals[[inColumnNum]] <- suppressWarnings(as.numeric (inHospitals[[inColumnNum]]))\n  \n  # subset to just a single state and remove NA\n  inHospitals <- subset (inHospitals, !is.na(inHospitals[inColumnNum]) & inHospitals$State == inState)\n  \n  # sort by the appropriate column, then by hospital name\n  sorted <- inHospitals[order(inHospitals[inColumnNum], inHospitals$Hospital.Name),]\n  \n  return (sorted)\n}\n\nrankhospital <- function(inState, condition, inRank = \"best\") {\n  \n  ## Read outcome data\n  outcome <-read.csv(\"outcome-of-care-measures.csv\", colClasses=\"character\")\n  \n  validCondition <- c(\"heart attack\", \"heart failure\", \"pneumonia\")\n  columnNum <- c(11,17,23)\n  conditionsMetadata = data.frame(validCondition, columnNum)\n  \n  # Check that outcome is valid\n  if (!condition %in% conditionsMetadata$validCondition) {\n    stop (\"invalid outcome\")  \n  }\n\n  # Check that state is valid\n  if (!inState %in% outcome$State) {\n    stop (\"invalid state\")  \n  }\n  \n  sorted <- subsetandsort (outcome, inState, \n                           conditionsMetadata[conditionsMetadata$validCondition==condition,]$columnNum)\n  \n  if (inRank == \"best\") {\n    inRank <- 1\n  }\n  else if (inRank == \"worst\") {\n    inRank <- nrow(sorted)\n  }\n  \n  if (inRank > nrow(sorted)) {\n    return (NA)\n  }\n  \n  return (sorted[inRank,]$Hospital.Name)\n}",
    "created" : 1425840021549.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3498548164",
    "id" : "D6642ABD",
    "lastKnownWriteTime" : 1425839334,
    "path" : "~/Coursera/R Programming Course/rankhospital.R",
    "project_path" : "rankhospital.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}